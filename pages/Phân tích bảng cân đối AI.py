from vnstock import Vnstock
import streamlit as st
from datetime import date
import pandas as pd
import matplotlib.pyplot as plt
import google.generativeai as genai


# Input for stock symbol
st.markdown(
    "<h1 style='color: darkblue;'>üìä Ph√¢n t√≠ch b·∫£ng c√¢n ƒë·ªëi v√† d√≤ng ti·ªÅn tr√™n s√†n ch·ª©ng kho√°n v·ªõi AI</h1>",
    unsafe_allow_html=True
)

symbol = st.text_input("Nh·∫≠p m√£ ch·ª©ng kho√°n v√†o ƒë√¢y (v√≠ d·ª•, VCB):", value="VCB")

if symbol:  # Ensure symbol is not empty
    stock = Vnstock().stock(symbol=symbol, source='VCI')

    # Exporting results as DataFrames
    balance_sheet_year = stock.finance.balance_sheet(period='year', lang='vi', dropna=True)
    balance_sheet_quarter = stock.finance.balance_sheet(period='quarter', lang='vi', dropna=True)
    income_statement = stock.finance.income_statement(period='year', lang='vi', dropna=True)
    cash_flow = stock.finance.cash_flow(period='year', lang='vi', dropna=True)
    financial_ratios = stock.finance.ratio(period='year', lang='vi', dropna=True)

    # Remove the first level of the multi-index in "Ch·ªâ s·ªë t√†i ch√≠nh"
    if isinstance(financial_ratios.columns, pd.MultiIndex):
        financial_ratios.columns = financial_ratios.columns.get_level_values(1)

    # Create a dictionary to map indicators to DataFrames
    dataframes = {
        "B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n theo NƒÉm": balance_sheet_year,
        "B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n theo Qu√Ω": balance_sheet_quarter,
        "K·∫øt qu·∫£ ho·∫°t ƒë·ªông kinh doanh": income_statement,
        "L∆∞u chuy·ªÉn ti·ªÅn t·ªá": cash_flow,
        "Ch·ªâ s·ªë t√†i ch√≠nh": financial_ratios,
    }

        # Selectbox for choosing an indicator
    selected_indicator = st.selectbox(
        "Ch·ªçn ch·ªâ s·ªë t√†i ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã:",
        list(dataframes.keys())
    )

    # Display the selected DataFrame
    st.write(f"### {selected_indicator}")
    st.write(dataframes[selected_indicator])
    
    # Set the Google Generative AI API key (authentication)
    API_KEY = "AIzaSyDgpMnXlUyC-Ebi7z4xRkdmxBzvfWkcw2Q"

    # Authenticate with Google Generative AI
    genai.configure(api_key=API_KEY)

    # Define the generative model
    model = genai.GenerativeModel('gemini-2.0-flash')

    # Add custom CSS for button styling
    st.markdown(
    """
    <style>
    div.stButton > button {
        background-color: darkblue;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }
    div.stButton > button:hover {
        background-color: #00008b;
    }
    </style>
    """,
    unsafe_allow_html=True
    )

     # Button to fetch results using Gemini AI API
    if st.button("Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi AI"):
        # Convert the selected DataFrame to a string for input to the Gemini AI API
        input_data = dataframes[selected_indicator].to_string()

        # Define the prompt for Gemini AI
        prompt = f"""
        Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh sau ƒë√¢y v√† cung c·∫•p c√°c nh·∫≠n x√©t chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh, xu h∆∞·ªõng, v√† c√°c ƒëi·ªÉm n·ªïi b·∫≠t. ƒê∆∞a ra c√°c khuy·∫øn ngh·ªã n·∫øu c√≥:

        {input_data}

        H√£y t·∫≠p trung v√†o c√°c y·∫øu t·ªë quan tr·ªçng nh∆∞:
        1. TƒÉng tr∆∞·ªüng doanh thu ho·∫∑c l·ª£i nhu·∫≠n.
        2. T√¨nh h√¨nh t√†i s·∫£n v√† n·ª£ ph·∫£i tr·∫£.
        3. D√≤ng ti·ªÅn ho·∫°t ƒë·ªông, ƒë·∫ßu t∆∞, v√† t√†i ch√≠nh.
        4. C√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng (n·∫øu c√≥).
        5. B·∫•t k·ª≥ r·ªßi ro ho·∫∑c c∆° h·ªôi n√†o ƒë∆∞·ª£c th·ªÉ hi·ªán qua d·ªØ li·ªáu.

        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† s·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu.
        """

        # Use Gemini AI API to analyze the data
        try:
            model_response = model.generate_content(prompt)          
            st.write("### K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ Gemini AI:")
            st.write(model_response.text)
        except Exception as e:
             st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini AI: {e}")

    st.write("")
 # Selectbox for choosing a data field (column) to display in the graph
# Exclude specific fields from the selectbox
    st.markdown(
    "<h3 style='color: darkblue;'> Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì theo ch·ªâ ti√™u</h3>",
    unsafe_allow_html=True
)
    excluded_fields = ['CP', 'NƒÉm', 'K·ª≥']
    available_fields = [col for col in dataframes[selected_indicator].columns if col not in excluded_fields]

    # Selectbox for choosing a data field (column) to display in the graph
    field_name = st.selectbox(
        "Ch·ªçn tr∆∞·ªùng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì:",
        available_fields
    )

    # Selectbox for choosing the chart style
    chart_style = st.selectbox(
        "Ch·ªçn ki·ªÉu bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng", "Bi·ªÉu ƒë·ªì mi·ªÅn"]
    )

    # Button to display the bar chart
    if st.button("Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì"):     
        # Extract the data for the selected field
        chart_data = dataframes[selected_indicator][['year', field_name]].dropna()

        # Plot the bar chart
        fig, ax = plt.subplots()
        if chart_style == "Bi·ªÉu ƒë·ªì c·ªôt":
           ax.bar(chart_data['year'], chart_data[field_name], color='darkblue')
           ax.set_title(f"Bi·ªÉu ƒë·ªì {field_name} theo NƒÉm (D·∫°ng c·ªôt)")
        elif chart_style == "Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng":
           ax.plot(chart_data['year'], chart_data[field_name], marker='o', color='darkblue')
           ax.set_title(f"Bi·ªÉu ƒë·ªì {field_name} theo NƒÉm (D·∫°ng ƒë∆∞·ªùng)")
        elif chart_style == "Bi·ªÉu ƒë·ªì mi·ªÅn":
           ax.fill_between(chart_data['year'], chart_data[field_name], color='darkblue', alpha=0.5)
           ax.set_title(f"Bi·ªÉu ƒë·ªì {field_name} theo NƒÉm (D·∫°ng mi·ªÅn)")

        ax.set_xlabel("NƒÉm")
        ax.set_ylabel(field_name)
        st.pyplot(fig)

else:
    st.write("Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n ƒë·ªÉ xem k·∫øt qu·∫£.")
