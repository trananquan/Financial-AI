import streamlit as st
import google.generativeai as genai
import pandas as pd
import matplotlib.pyplot as plt

# Set the Google Generative AI API key (authentication)
API_KEY = "AIzaSyAD5-tRTbhtr17baOAVq307Fguv5oa49hY"

# Authenticate with Google Generative AI
genai.configure(api_key=API_KEY)

model = genai.GenerativeModel('gemini-2.0-flash')

# Add custom CSS for button styling
st.markdown(
    """
    <style>
    div.stButton > button:first-child {
        background-color: darkblue;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
    }
    div.stButton > button:first-child:hover {
        background-color: blue;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

def get_financial_analysis(text_input):
    """Use Google's gemini-2.0-flash model to analyze financial indicators and generate a report."""
    try:
        # Generate financial analysis report using gemini-2.0-flash model
        response = model.generate_content( contents=f"Ph√¢n t√≠ch c√°c ch·ªâ ti√™u t√†i ch√≠nh sau v√† xu·∫•t ra b√°o c√°o t√†i ch√≠nh: {text_input}",)
       
        return response.text  # Return the generated text
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {e}")
        return None

def display_financial_report(report):
    """Display the financial report in Streamlit."""
    if not report:
        st.warning("Kh√¥ng c√≥ b√°o c√°o hi·ªÉn th·ªã.")
        return

    st.subheader("B√°o c√°o ph√¢n t√≠ch t√†i ch√≠nh d·ª±a tr√™n AI")
    st.write(report)

def parse_indicators(input_text):
    """Parse the input text into a dictionary of financial indicators."""
    if not input_text.strip():  # Check if the input is empty or contains only whitespace
        return {}  # Return an empty dictionary without showing warnings
    
    try:
        # Split the input by commas
        pairs = input_text.split(",")
        data = {}
        for pair in pairs:
            if ':' in pair:
                try:
                    key, value = pair.split(':', 1)
                    data[key.strip()] = float(value.strip())
                except ValueError:
                    st.warning(f"C√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá: '{pair}'. Skipping...")
            else:
                st.warning(f"C√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá: '{pair}'. Skipping...")
        return data
    except Exception as e:
        st.error(f"B·ªã l·ªói khi x·ª≠ l√Ω c√°c ch·ªâ ti√™u t√†i ch√≠nh: {e}")
        return None

# Display the input data as a table

def generate_bar_chart(data):
    """Generate a bar chart based on the financial indicators."""
    if not data:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t ra bi·ªÉu ƒë·ªì.")
        return

    df = pd.DataFrame(list(data.items()), columns=["Indicator", "Value"])

    st.subheader("Bi·ªÉu ƒë·ªì c·ªôt c·ªßa c√°c ch·ªâ ti√™u t√†i ch√≠nh")
    fig, ax = plt.subplots(figsize=(20, 10))
    df.plot(kind="bar", x="Indicator", y="Value", ax=ax, legend=False)
    ax.set_ylabel("Gi√° tr·ªã")
    st.pyplot(fig)

def generate_pie_chart(data):
    """Xu·∫•t bi·ªÉu ƒë·ªì qu·∫°t d·ª±a tr√™n c√°c ch·ªâ ti√™u t√†i ch√≠nh ."""
    if not data:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì.")
        return

    df = pd.DataFrame(list(data.items()), columns=["Indicator", "Value"])

    st.subheader("Bi·ªÉu ƒë·ªì qu·∫°t c·ªßa c√°c ch·ªâ ti√™u t√†i ch√≠nh")
    fig, ax = plt.subplots(figsize=(20, 10))
    ax.pie(df["Value"], labels=df["Indicator"], autopct='%1.1f%%', startangle=90)
    ax.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.
    st.pyplot(fig)

# Streamlit app UI
st.set_page_config(page_icon="üìä",layout="wide")
st.title("üìä ·ª®ng d·ª•ng ph√¢n t√≠ch ch·ªâ ti√™u t√†i ch√≠nh b·∫±ng AI")
st.write("Nh·∫≠p v√†o c√°c ch·ªâ ti√™u t√†i ch√≠nh quan tr·ªçng, App s·∫Ω xu·∫•t ra b√°o c√°o ph√¢n t√≠ch s·ª≠ d·ª•ng m√¥ h√¨nh AI Gemini. Sau ƒë√≥, c√≥ th·ªÉ so s√°nh v·ªõi c√°c doanh nghi·ªáp kh√°c trong ng√†nh")

# Text area for financial indicators input
user_input = st.text_area(
    "Nh·∫≠p v√†o c√°c ch·ªâ ti√™u t√†i ch√≠nh quan tr·ªçng, ngƒÉn c√°ch b·ªüi d·∫•u hai ch·∫•m v√† d·∫•u ph·∫©y (V√≠ d·ª•: Doanh thu: 120000, Chi ph√≠: 80000, L·ª£i nhu·∫≠n: 40000...). G√µ l·ªánh g·ª£i √Ω ƒë·ªÉ so s√°nh v·ªõi c√°c doanh nghi·ªáp kh√°c trong ng√†nh",
    placeholder="G√µ c√°c ch·ªâ ti√™u t√†i ch√≠nh t·∫°i ƒë√¢y (NgƒÉn c√°ch b·ªüi d·∫•u hai ch·∫•m v√† d·∫•u ph·∫©y)...",
    height=200,
)

if st.button("Ph√¢n t√≠ch & xu·∫•t b√°o c√°o"):
    if user_input.strip():
        with st.spinner("Analyzing financial data with Google Generative AI (gemini-2.0-flash)..."):
            report = get_financial_analysis(user_input)
            display_financial_report(report)
    else:
        st.warning("Xin h√£y nh·∫≠p ch·ªâ ti√™u t√†i ch√≠nh ƒë·ªÉ h·ªá th·ªëng x·ª≠ l√Ω.")

# Parse indicators and generate charts
indicators = parse_indicators(user_input)

# Create two columns for the buttons
col1, spacer, col2 = st.columns([3, 0.8, 3]) 

with col1:
    if st.button("Xu·∫•t ra bi·ªÉu ƒë·ªì c·ªôt"):
        generate_bar_chart(indicators)
with col2:
    if st.button("Xu·∫•t ra bi·ªÉu ƒë·ªì qu·∫°t"):
        generate_pie_chart(indicators)
